% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mbta_map.R
\name{mbta_map}
\alias{mbta_map}
\title{MBTA Map Object for SMC Simulation}
\usage{
mbta_map(
  data,
  existing_plan = NULL,
  ndists = 1,
  total_capacity = "unit_capacity",
  pop_tol = 0.25,
  community_type = c("rapid_transit", "commuter_rail", "adjacent", "adjacent_small_town"),
  adj = NULL,
  precomputed = FALSE
)
}
\arguments{
\item{data}{An sf data frame containing parcel polygons. Should be output
from \code{load_municipality()} or have precomputed attributes from
\code{precompute_spatial_attributes()}.}

\item{existing_plan}{Optional vector of district assignments for reference
plan (same length as nrow(data)). Used for status-quo constraints. Default: NULL.}

\item{ndists}{Number of districts to simulate (default: 1). \strong{Phase 1 MVP
enforces ndists=1} for single-component overlays only.}

\item{total_capacity}{Name of column in \code{data} containing unit capacity
values (default: "unit_capacity")}

\item{pop_tol}{Tolerance for capacity target as fraction (default: 0.25,
meaning target Â± 25\%)}

\item{community_type}{MBTA community category. One of: "rapid_transit",
"commuter_rail", "adjacent", "adjacent_small_town". Used to determine
minimum requirements and station area coverage thresholds.}

\item{adj}{Optional adjacency list (output from \code{build_adjacency()}). If
NULL, will be computed automatically using rook adjacency. Default: NULL.}

\item{precomputed}{Logical indicating whether \code{data} has precomputed spatial
attributes from \code{precompute_spatial_attributes()}. Precomputation provides
~1000x speedup for SMC simulation. Default: FALSE.}
}
\value{
An \code{mbta_map} S3 object (list) with components:
\item{data}{data.table with sf geometry column containing parcels}
\item{ndists}{Number of districts (Phase 1: always 1)}
\item{capacity_col}{Name of capacity column}
\item{target_capacity}{Minimum required unit capacity}
\item{target_area}{Minimum required land area (acres)}
\item{pop_tol}{Capacity tolerance fraction}
\item{community_type}{MBTA community category}
\item{community_name}{Municipality name (from data attributes)}
\item{station_area_unit_pct}{Required \% of capacity in station areas}
\item{station_area_land_pct}{Required \% of area in station areas}
\item{adj}{Adjacency list (list of integer vectors)}
\item{precomputed}{Boolean indicating precomputed attributes}
\item{existing_plan}{Reference plan assignments (if provided)}
\item{component_info}{Component totals for infeasibility checking}
}
\description{
The \code{mbta_map} class stores a complete zoning problem definition for
Sequential Monte Carlo simulation of MBTA overlay districts. This includes
parcel data, adjacency relationships, community requirements, and metadata.

Constructor for \code{mbta_map} S3 class, which stores the zoning problem
definition for SMC simulation. This object contains all necessary data
for generating reference distributions of compliant zoning plans.
}
\details{
\subsection{Community Requirements}{

The function loads community-specific requirements from
\code{inst/extdata/community_info.csv}:
\itemize{
\item \code{target_capacity}: Minimum housing units required
\item \code{target_area}: Minimum land area (acres)
\item \code{station_area_unit_pct}: Required \% of capacity in station areas
\item \code{station_area_land_pct}: Required \% of area in station areas
}

Requirements vary by community type:
\itemize{
\item \strong{Rapid Transit}: 90\% station coverage (both capacity and area)
\item \strong{Commuter Rail}: 50-90\% coverage (varies by developable station area)
\item \strong{Adjacent}: 0\% coverage (no station requirement)
\item \strong{Adjacent Small Town}: 0\% coverage, lower minimums
}
}

\subsection{Adjacency Graph}{

If \code{adj=NULL}, the constructor automatically builds the adjacency graph using
\strong{rook adjacency} (parcels must share an edge, not just a corner). This is
more robust for contiguity checking than queen adjacency.

For large municipalities (>5000 parcels), building the adjacency graph can
take 10-30 seconds. Consider building once and caching:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{adj <- build_adjacency(parcels)
saveRDS(adj, "cached_adjacency.rds")
map <- mbta_map(parcels, adj = readRDS("cached_adjacency.rds"))
}\if{html}{\out{</div>}}
}

\subsection{Precomputed Attributes}{

For SMC simulation, precomputation provides ~1000x speedup by eliminating
repeated spatial intersections:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# Setup phase (once per municipality)
parcels <- load_municipality("chelsea.zip")
stations <- load_station_areas()
parcels_precomputed <- precompute_spatial_attributes(
  parcels,
  station_areas = stations
)

# Create map with precomputed data
map <- mbta_map(parcels_precomputed, precomputed = TRUE)
}\if{html}{\out{</div>}}
}

\subsection{Phase 1 Limitations}{

This implementation supports \strong{single-component (fully contiguous) overlay
districts only} (ndists = 1). Multi-component overlays permitted under
760 CMR 59.04(3)(d) are not yet supported. See PRD Section 15.2 for
rationale and future extension path.
}
}
\examples{
\dontrun{
# Basic usage
library(mbtazone)

# Load municipality data
parcels <- load_municipality(
  "inst/extdata/parcels/57_CHELSEA_basic.zip",
  community_name = "Chelsea"
)

# Create map object
chelsea_map <- mbta_map(
  parcels,
  community_type = "rapid_transit",
  total_capacity = "unit_capacity"
)

print(chelsea_map)

# With precomputed attributes (for performance)
stations <- load_station_areas()
parcels_precomp <- precompute_spatial_attributes(parcels, stations)

chelsea_map <- mbta_map(
  parcels_precomp,
  community_type = "rapid_transit",
  precomputed = TRUE
)

# Access components
chelsea_map$target_capacity  # Minimum units required
chelsea_map$adj              # Adjacency graph
summary(chelsea_map)         # Detailed statistics
}

}
\seealso{
\code{\link{build_adjacency}} for adjacency graph construction,
\code{\link{load_municipality}} for loading parcel data,
\code{\link{precompute_spatial_attributes}} for performance optimization
}
