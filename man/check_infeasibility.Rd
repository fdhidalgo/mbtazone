% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/smc_particle.R
\name{check_infeasibility}
\alias{check_infeasibility}
\title{Check Particle Infeasibility (Tier 2)}
\usage{
check_infeasibility(particle, map, check_density = TRUE)
}
\arguments{
\item{particle}{A ParticleState object}

\item{map}{An mbta_map object containing minimum requirements}

\item{check_density}{Logical indicating whether to check gross density
infeasibility (default: TRUE). This is an optimization that can be
disabled if too aggressive.}
}
\value{
A list with components:
\item{infeasible}{Logical: TRUE if particle cannot possibly succeed}
\item{reason}{Character: reason for infeasibility ("capacity", "area",
"station_coverage", "gross_density"), or NA if feasible}
}
\description{
Determine if a particle can possibly reach the minimum requirements, even
if it adds all remaining parcels in its connected component. This is the
Tier 2 check: O(1) arithmetic to kill impossible particles early.
}
\details{
\subsection{Infeasibility Tests (All O(1))}{

A particle is infeasible if any of the following hold:

\strong{1. Capacity Infeasibility:}

\if{html}{\out{<div class="sourceCode">}}\preformatted{max_capacity = total_capacity + remaining_capacity
if (max_capacity < target_capacity) → infeasible
}\if{html}{\out{</div>}}

\strong{2. Area Infeasibility:}

\if{html}{\out{<div class="sourceCode">}}\preformatted{max_area = total_area + remaining_area
if (max_area < target_area) → infeasible
}\if{html}{\out{</div>}}

\strong{3. Station Coverage Infeasibility} (if station requirement > 0):

\if{html}{\out{<div class="sourceCode">}}\preformatted{max_station_capacity = station_capacity + remaining_station_capacity
max_station_pct = max_station_capacity / max_capacity
if (max_station_pct < required_pct) → infeasible
}\if{html}{\out{</div>}}

\strong{4. Gross Density Infeasibility} (optional optimization):

\if{html}{\out{<div class="sourceCode">}}\preformatted{min_density = max_capacity / max_area
if (min_density < 15.0 units/acre) → infeasible
}\if{html}{\out{</div>}}
}

\subsection{Conservative Approach}{

These checks assume the particle adds \strong{all} remaining parcels in its
connected component. This is conservative: won't falsely kill particles
that could succeed, but allows early termination of truly impossible ones.
}

\subsection{Performance Impact}{

Per PRD Section 4.3.6, Tier 2 checks prevent wasted Tier 3 compliance
calls. In typical runs:
\itemize{
\item ~20\% of particles killed by Tier 2
\item Saves ~10\% of total runtime
\item Each check: ~0.001 seconds (pure arithmetic)
}
}
}
\examples{
\dontrun{
# Propagate particle
for (i in 1:50) {
  # Add parcel
  particle <- add_parcel_to_particle(particle, next_id, map, prob)

  # Check infeasibility
  feasibility <- check_infeasibility(particle, map)
  if (feasibility$infeasible) {
    cat("Particle died:", feasibility$reason, "\n")
    break
  }
}
}

}
\seealso{
\code{\link{add_parcel_to_particle}}, \code{\link{check_completion}}
}
